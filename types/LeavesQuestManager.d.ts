import { ILogger } from "@spt/models/spt/utils/ILogger";
import { DatabaseServer } from "@spt/servers/DatabaseServer";
import { JsonUtil } from "@spt/utils/JsonUtil";
import { VFS } from "@spt/utils/VFS";
import { WeightedRandomHelper } from "@spt/helpers/WeightedRandomHelper";
import { HashUtil } from "@spt/utils/HashUtil";
import { LeavesUtils } from "./LeavesUtils";
import { ProfileHelper } from "@spt/helpers/ProfileHelper";
import { Questrandomizer } from "./mod";
import { LeavesSettingsManager } from "./LeavesSettingsManager";
import { LeavesQuestTools } from "./LeavesQuestTools";
import { LeavesIdManager } from "./LeavesIdManager";
import { LeavesQuestGeneration } from "./LeavesQuestGeneration";
export declare class LeavesQuestManager {
    protected databaseServer: DatabaseServer;
    protected vfs: VFS;
    protected jsonUtil: JsonUtil;
    protected logger: ILogger;
    protected weightedRandomHelper: WeightedRandomHelper;
    protected hashUtil: HashUtil;
    protected leavesUtils: LeavesUtils;
    protected profileHelper: ProfileHelper;
    protected leavesSettingsManager: LeavesSettingsManager;
    protected leavesQuestTools: LeavesQuestTools;
    protected leavesIdManager: LeavesIdManager;
    protected leavesQuestGeneration: LeavesQuestGeneration;
    private originalQuestDB;
    private originalLocaleDB;
    private locales;
    private quests;
    private hasInit;
    private questRandomizer;
    private currentContex;
    private timeoutTracker;
    private unloadCheckTime;
    private weaponEquivalentTable;
    constructor(databaseServer: DatabaseServer, vfs: VFS, jsonUtil: JsonUtil, logger: ILogger, weightedRandomHelper: WeightedRandomHelper, hashUtil: HashUtil, leavesUtils: LeavesUtils, profileHelper: ProfileHelper, leavesSettingsManager: LeavesSettingsManager, leavesQuestTools: LeavesQuestTools, leavesIdManager: LeavesIdManager, leavesQuestGeneration: LeavesQuestGeneration);
    addWeaponEquivalent(originalWeapon: string, equivalentWeapon: string): void;
    private getWeaponEquivalents;
    unloadChecker(timeSinceLastRun: number): boolean;
    switchContext(sessionId: any): void;
    private load;
    private loadWeaponEquivalents;
    private generateQuests;
    private printLogo;
    private loadQuestsIntoDatabase;
    private loadLocalizationIntoDatabase;
    private set;
    setQuestRandomizerReference(questRandomizer: Questrandomizer): void;
}
