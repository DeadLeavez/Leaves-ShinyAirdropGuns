import { ILogger } from "@spt/models/spt/utils/ILogger";
import { DatabaseServer } from "@spt/servers/DatabaseServer";
import { JsonUtil } from "@spt/utils/JsonUtil";
import { HashUtil } from "@spt/utils/HashUtil";
import { VFS } from "@spt/utils/VFS";
import { IQuest, IQuestCondition, IQuestConditionCounterCondition } from "@spt/models/eft/common/tables/IQuest";
import { LeavesUtils } from "./LeavesUtils";
import { QuestStatus } from "@spt/models/enums/QuestStatus";
import { LeavesLocaleGeneration } from "./LeavesLocaleGeneration";
import { LeavesSettingsManager } from "./LeavesSettingsManager";
import { WeightedRandomHelper } from "@spt/helpers/WeightedRandomHelper";
import { HandbookHelper } from "@spt/helpers/HandbookHelper";
export declare class Depth {
    constructor();
    depth: number;
    level: number;
}
export declare class LeavesQuestTools {
    protected databaseServer: DatabaseServer;
    protected vfs: VFS;
    protected jsonUtil: JsonUtil;
    protected hashUtil: HashUtil;
    protected logger: ILogger;
    protected leavesUtils: LeavesUtils;
    protected leavesSettingsManager: LeavesSettingsManager;
    protected leavesLocaleGeneration: LeavesLocaleGeneration;
    protected weightedRandomHelper: WeightedRandomHelper;
    protected handbookHelper: HandbookHelper;
    private questPoints;
    private depthList;
    constructor(databaseServer: DatabaseServer, vfs: VFS, jsonUtil: JsonUtil, hashUtil: HashUtil, logger: ILogger, leavesUtils: LeavesUtils, leavesSettingsManager: LeavesSettingsManager, leavesLocaleGeneration: LeavesLocaleGeneration, weightedRandomHelper: WeightedRandomHelper, handbookHelper: HandbookHelper);
    changeXPOnQuest(quest: IQuest, multiplier: number): void;
    generateDepthList(): void;
    private findDepth;
    getQuestDepth(questID: string): Depth;
    getDepthList(): Record<string, Depth>;
    setQuestPoints(points: any): void;
    zoneIDToMap(zoneID: string): string;
    findCounterConditionType(conditions: IQuestConditionCounterCondition[], type: string): number;
    addKillObjectiveToQuest(quest: IQuest, target: string, count: number): void;
    addGearToQuest(condition: IQuestConditionCounterCondition[], gearPieces: string[]): number;
    addHandOverObjectiveToQuest(quest: IQuest, count: number, items: string[]): number;
    addLocationToQuest(conditions: IQuestConditionCounterCondition[], flags: any): number;
    getQuestLocationText(quest: IQuest): string;
    purgeFindItemTasks(tasks: IQuestCondition[]): void;
    addPrerequisiteQuest(targetQuest: IQuest, previousQuestID: string, statuses: QuestStatus[]): void;
    addPrerequisiteLevel(targetQuest: IQuest, requiredLevel: number): void;
    addRewardExperience(targetQuest: IQuest, experienceCount: number): void;
    addRandomWeaponGroup(condition: IQuestConditionCounterCondition, flags: any): void;
    addWeaponGroup(group: string, condition: IQuestConditionCounterCondition): void;
    addModsToWeaponModGroup(modGroup: string, weaponModsCurrent: string[][], merge: boolean): string[][];
    randomizeWeapons(killsCondition: IQuestConditionCounterCondition, flags: any): void;
    randomizeDistance(killsCondition: IQuestConditionCounterCondition, flags: any): void;
    randomizeTimeOfDay(killsCondition: IQuestConditionCounterCondition, flags: any): void;
    randomizeBodyPart(killsCondition: IQuestConditionCounterCondition, flags: any): void;
    randomizeTarget(killsCondition: IQuestConditionCounterCondition, flags: any): void;
    randomizeHandover(task: IQuestCondition, originalItem: string): void;
    randomizeLocations(locations: IQuestConditionCounterCondition, flags: any): void;
    addRewardItem(targetQuest: IQuest, itemID: string, count: number, FIR: boolean): void;
}
