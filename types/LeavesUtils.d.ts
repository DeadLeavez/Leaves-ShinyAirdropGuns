import { ILogger } from "@spt/models/spt/utils/ILogger";
import { LogTextColor } from "@spt/models/spt/logging/LogTextColor";
import { DatabaseServer } from "@spt/servers/DatabaseServer";
import { JsonUtil } from "@spt/utils/JsonUtil";
import { VFS } from "@spt/utils/VFS";
import { WeightedRandomHelper } from "@spt/helpers/WeightedRandomHelper";
import { HashUtil } from "@spt/utils/HashUtil";
import { IItem } from "@spt/models/eft/common/tables/IItem";
export declare class LeavesUtils {
    protected databaseServer: DatabaseServer;
    protected vfs: VFS;
    protected jsonUtil: JsonUtil;
    protected logger: ILogger;
    protected weightedRandomHelper: WeightedRandomHelper;
    protected hashUtil: HashUtil;
    private modFolder;
    private tierList;
    private itemTiers;
    private debug;
    constructor(databaseServer: DatabaseServer, vfs: VFS, jsonUtil: JsonUtil, logger: ILogger, weightedRandomHelper: WeightedRandomHelper, hashUtil: HashUtil);
    setModFolder(folder: string): void;
    setDebug(enabled: boolean): void;
    setTierList(file: string): void;
    loadFile(file: string): any;
    getFoldersInFolder(folder: string): string[];
    getFilesInFolder(folder: string): string[];
    getFileWithoutExtension(file: string): string;
    saveFile(data: any, file: string, serialize?: boolean): void;
    checkIfFileExists(file: string): boolean;
    getTraderNickname(id: string): string;
    dataDump(): void;
    getLocale(locale: string, id: string, type?: string): string;
    getStringBetweenChars(original: string, char1: string, char2: string): string;
    printColor(message: string, color?: LogTextColor, debug?: boolean): void;
    debugJsonOutput(jsonObject: any, label?: string): void;
    getUniqueValues<T>(array: T[], count: number): T[];
    getUniqueWeightedValues<T>(weightedArray: any, count: number): T[];
    generateValueAdjustment(previousValue: number, factors: number[]): number;
    searchObject(stringToFind: string, object: any): boolean;
    getClosestTier(currentTier: number): number;
    getRandomItemFromTier(tier: number): string;
    getTierFromID(item: string): number;
    private generateItemTiers;
    isProperItem(item: string): boolean;
    RTT_Underline(original: string): string;
    RTT_Rotate(original: string, angle: number): string;
    RTT_Align(original: string, alignment: string): string;
    RTT_Bold(original: string): string;
    RTT_Italic(original: string): string;
    RTT_Color(original: string, color: string): string;
    RTT_Rainbowify(original: string): string;
    RTT_Size(original: string, size: string): string;
    HSVtoRGB(h: any, s: any, v: any): {
        r: number;
        g: number;
        b: number;
    };
    hasParent(item: IItem, parent: string): boolean;
    private add;
}
export declare const RTT_Align: {
    LEFT: string;
    CENTER: string;
    RIGHT: string;
    JUSTIFIED: string;
    FLUSH: string;
};
export declare const RTT_Colors: {
    BLACK: string;
    BLUE: string;
    GREEN: string;
    ORANGE: string;
    PURPLE: string;
    RED: string;
    WHITE: string;
};
